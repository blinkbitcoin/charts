global:
  network: mainnet
  # needed to use the bitnamilegacy repository
  # https://github.com/bitnami/containers/issues/83267
  security:
    allowInsecureImages: true
image:
  repository: lightninglabs/lnd
  tag: v0.19.2-beta
  pullPolicy: IfNotPresent
sidecarImage:
  repository: us.gcr.io/galoy-org/lnd-sidecar
  digest: "sha256:e0ccf6d340a99cecc39c4d7ba52014c767220069b5b1b314aceb34253c4fa79f"
  git_ref: 1cb5596
backupImage:
  repository: us.gcr.io/galoy-org/lnd-backup
  pullPolicy: IfNotPresent
  digest: sha256:0f016fef49c0f3d2d0ac913d71e570e7e35d55eac200d8d1ea227b924e3d2b3f
  git_ref: e520967
kubemonkey:
  enabled: false
configmap:
  customValues: []
serviceAccount:
  # Specifies whether a service account should be created
  create: true
podAnnotations:
  prometheus.io/path: /metrics
  prometheus.io/port: "9092"
  prometheus.io/scrape: "true"
terminationGracePeriodSeconds: 600
resources: {}
apiService:
  # On google cloud, static ip can be created using `gcloud compute addresses create`
  staticIP: ""
  type: ClusterIP
  annotations: {}
  ports:
    rpc: 10009
    rest: 8080
p2pService:
  # On google cloud, static ip can be created using `gcloud compute addresses create`
  staticIP: ""
  type: ClusterIP
  port: 9735
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 20Gi
affinity:
  podAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - bitcoind
          topologyKey: kubernetes.io/hostname
walletPassword: ""
secrets:
  create: true
lndGeneralConfig:
  - restlisten=0.0.0.0:8080
  - rpclisten=0.0.0.0:10009
  - listen=0.0.0.0:9735
  - prometheus.listen=0.0.0.0:9092
  - bitcoin.node=bitcoind
  - bitcoind.rpcuser=rpcuser
  - bitcoind.zmqpubrawblock=tcp://bitcoind:28332
  - bitcoind.zmqpubrawtx=tcp://bitcoind:28333
  - tlsextradomain=lnd
  - accept-keysend=1
  - allow-circular-route=1
  - stagger-initial-reconnect=1
  - protocol.wumbo-channels=1
  - maxchansize=500000000
  - bitcoin.timelockdelta=60
  - default-remote-max-htlcs=50
  - debuglevel=info
  - prometheus.enable=1
  - gc-canceled-invoices-on-the-fly=true
  - gc-canceled-invoices-on-startup=true
  - tor.active=true
  - tor.v3=true
  - tor.skip-proxy-for-clearnet-targets=true
bitcoindRpcPassSecretName: bitcoind-rpcpassword
rbac:
  create: true
autoGenerateSeed:
  enabled: false
autoGenerateTls:
  enabled: true
# LND database configuration
lnd:
  db:
    backend: bbolt # Options: bbolt, postgres
    config:
      # This secret should contain `uri` as the key for PostgreSQL connection string
      # Only required when backend is set to postgres
      secret: ""
      # PostgreSQL specific settings
      postgres:
        timeout: 0
        maxconnections: 21
# PostgreSQL configuration
postgresql:
  image:
    repository: bitnamilegacy/postgresql
  enabled: false # Set to true to deploy PostgreSQL
  auth:
    enablePostgresUser: false
    username: lnd
    password: lnd
    database: lnd
    existingSecret: lnd-postgres-creds
## Static Channel Backup (SCB) Configuration
## Automatically backs up LND channel state to cloud storage
## At least one backup destination must be configured when backup.enabled=true
backup:
  # Enable the backup sidecar container
  enabled: false
  ## Google Cloud Storage backup
  ## Requires a GCS service account with bucket write permissions
  ## Create secret: kubectl create secret generic lnd-backup-gcs-sa --from-file=service-account.json=/path/to/sa.json
  gcs:
    enabled: false
    # GCS bucket name (must already exist)
    bucketName: "lnd-static-channel-backups"
    # Secret containing GCS service account JSON
    serviceAccountSecret:
      name: "lnd-backup-gcs-sa"
      key: "service-account.json"
  ## AWS S3 backup
  ## Requires AWS credentials with S3 write permissions
  ## Create secret: kubectl create secret generic lnd-backup-aws-creds --from-literal=access-key-id=XXX --from-literal=secret-access-key=YYY
  s3:
    enabled: false
    # S3 bucket name (must already exist)
    bucketName: "lnd-static-channel-backups"
    # AWS region
    region: "us-east-1"
    # Secret containing AWS access key ID
    accessKeySecret:
      name: "lnd-backup-aws-creds"
      key: "access-key-id"
    # Secret containing AWS secret access key
    secretKeySecret:
      name: "lnd-backup-aws-creds"
      key: "secret-access-key"
  ## Nextcloud/WebDAV backup
  ## Requires Nextcloud instance with WebDAV access
  ## Create secret: kubectl create secret generic lnd-backup-nextcloud --from-literal=username=XXX --from-literal=password=YYY
  nextcloud:
    enabled: false
    # Nextcloud WebDAV URL (e.g., https://cloud.example.com/remote.php/dav/files/username)
    url: "https://your-nextcloud.com/remote.php/dav/files/lnd-backup"
    # Secret containing Nextcloud username
    userSecret:
      name: "lnd-backup-nextcloud"
      key: "username"
    # Secret containing Nextcloud password/app password
    passwordSecret:
      name: "lnd-backup-nextcloud"
      key: "password"

## LND Monitoring Subchart Configuration
## lndmon provides Prometheus metrics for LND node monitoring
## Implemented as a secure subchart with isolated RBAC and minimal access
lndmon:
  # Enable lndmon monitoring subchart
  enabled: false

  # Global configuration (inherited by subchart)
  global:
    network: mainnet

  # Image configuration
  image:
    repository: lightninglabs/lndmon
    tag: v0.2.12
    pullPolicy: IfNotPresent

  # Service configuration
  service:
    type: ClusterIP
    port: 9092
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9092"
      prometheus.io/path: "/metrics"

  # Security configuration (enhanced for subchart)
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000

  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
      - ALL

  # Isolated service account
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  # Minimal RBAC permissions
  rbac:
    create: true

  # Resource limits
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 64Mi

  # LND connection configuration (set by parent chart)
  lnd:
    serviceName: ""  # Will be set to LND service name
    rpcPort: 10009
    network: ""      # Will inherit from global.network

  # Health checks
  healthChecks:
    liveness:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 30
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3

  # Monitoring configuration
  monitoring:
    prometheus:
      enabled: true
      port: 9092
      path: "/metrics"
      scrapeInterval: "30s"


